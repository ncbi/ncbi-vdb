# ===========================================================================
#
#                            PUBLIC DOMAIN NOTICE
#               National Center for Biotechnology Information
#
#  This software/database is a "United States Government Work" under the
#  terms of the United States Copyright Act.  It was written as part of
#  the author's official duties as a United States Government employee and
#  thus cannot be copyrighted.  This software/database is freely available
#  to the public for use. The National Library of Medicine and the U.S.
#  Government have not placed any restriction on its use or reproduction.
#
#  Although all reasonable efforts have been taken to ensure the accuracy
#  and reliability of the software and data, the NLM and the U.S.
#  Government do not and cannot warrant the performance or results that
#  may be obtained by using this software or data. The NLM and the U.S.
#  Government disclaim all warranties, express or implied, including
#  warranties of performance, merchantability or fitness for any particular
#  purpose.
#
#  Please cite the author in any work or product based on this material.
#
# ===========================================================================

# pick up dependencies from object directory
ifdef SRCDIR
	include $(wildcard *.d)
endif

# determine shell environment
include $(TOP)/build/Makefile.shell

# load build configuration
include $(CONFIG_FILE)

# normally build shared and static external libs
LIBEXT = $(LIBX) $(SHLX)

# normally build static intermediate libs
ILIBEXT = $(LIBX)

# determine BUILD
ifeq (,$(BUILD))
	BUILD = dbg
endif

# some rules are sensitive to the type of build
BUILDTYPE = $(BUILD)

# adjust settings for build
ifeq (dbg,$(BUILD))
	DEBUG := -D_DEBUGGING
endif
ifeq (prof,$(BUILD))
	DEBUG := -D_PROFILING
endif
ifeq (pur,$(BUILD))
	DEBUG := -D_DEBUGGING
	LD_PRE := purify
	LNKG = stat
endif
ifeq (pcov,$(BUILD))
	DEBUG := -D_DEBUGGING
	LD_PRE := purecov
	LNKG = stat
endif
ifeq (scm,$(BUILD))
	BUILDTYPE = rel
	CHECKSUM := --checksum
endif

ifeq (yes,$(HAS_RHOST))
	LOCAL_OR_REMOTE = remote
else
	LOCAL_OR_REMOTE = local
endif


# drop all suffix rules
.SUFFIXES:

# load OS and COMP specific files
include $(TOP)/build/Makefile.$(OS)
include $(TOP)/build/Makefile.$(COMP)

# external schema modules
EXT_SCHEMA_MODULES = axf sraxf wgsxf vxf
UPDATE_SCHEMA_LIBS := $(addprefix -lw,$(EXT_SCHEMA_MODULES))
READONLY_SCHEMA_LIBS = $(addprefix -l,$(EXT_SCHEMA_MODULES))
ALWAYS_STATIC_SCHEMA_LIBS = $(addprefix -s,$(EXT_SCHEMA_MODULES))

# full directory paths
TARGDIR ?= $(OUTDIR)/$(OS)/$(TOOLSET)/$(ARCH)/$(BUILD)
BINDIR ?= $(TARGDIR)/bin
ifeq (win,$(OS))
    # on Windows, place test executables next to .dlls
    TEST_BINDIR = $(BINDIR)
else
    TEST_BINDIR = $(TARGDIR)/test-bin
    FLIBDIR = $(TARGDIR)/fuzz

$(FLIBDIR):
	mkdir -p $@
endif

ILIBDIR = $(TARGDIR)/ilib
LIBDIR = $(TARGDIR)/lib
OBJDIR = $(TARGDIR)/obj/$(MODULE)

CLSPATH         ?= $(TARGDIR)/java
CLASSPATH       ?= $(CLSPATH)
CLASSDIR        ?= $(TARGDIR)/$(MODULE)
TEST_CLSPATH    ?= $(TARGDIR)/test/java
JAVASOURCEPATH  ?= $(TOP)/java

# path to the ncbi sub-directory
# this is where modules and installed schema files are kept
ifeq (win,$(OS))
    # under Windows, we are always relative to binary path
	NCBIDIR = $(BINDIR)/ncbi
else
	# under Linux and Mac, it can be binary or library
	NCBIDIR = $(LIBDIR)/ncbi $(BINDIR)/ncbi
endif

# make reissue command
MAKE_CMD = $(MAKE) BUILD=$(BUILD) TOOLSET=$(TOOLSET) COMP=$(COMP) LNKG=$(LNKG) \
    TOP=$(TOP) SRCDIR=$(SRCDIR) OUTDIR=$(OUTDIR) -C $(OBJDIR) -f $(SRCDIR)/Makefile

JMAKE_CMD = $(MAKE) BUILD=$(BUILD) TOOLSET=$(TOOLSET) COMP=$(COMP) LNKG=$(LNKG) \
    TOP=$(TOP) SRCDIR=$(SRCDIR) OUTDIR=$(OUTDIR) -C $(CLASSDIR) -f $(SRCDIR)/Makefile

# directory and link creation
# compilation rules
SUBDIRS = bin test-bin ilib lib fuzz
OUTDIRS = schema

MAKE_JOBS = 1

stdcompile: makedirs
	@ $(MAKE_CMD) -j$(MAKE_JOBS) $(TARGDIR)/compile

# clean rules
stdclean:
	@ -rm -rf $(OBJDIR)
	@ -rm -rf $(addprefix $(OUTDIR)/$(OS)/$(TOOLSET)/,dyn stat)
	@ -rm -rf $(addsuffix .*,$(addprefix $(ILIBDIR)/,$(ALL_LIBS))) \
			$(addsuffix .*,$(addprefix $(LIBDIR)/,$(ALL_LIBS))) \
			$(addsuffix -static.*,$(addprefix $(LIBDIR)/,$(ALL_LIBS))) \
			$(addsuffix *,$(addprefix $(BINDIR)/,$(ALL_TOOLS) $(ALL_LIBS))) \
			$(addsuffix *,$(addprefix $(TEST_BINDIR)/,$(ALL_TOOLS) $(TEST_TOOLS) $(SLOW_TEST_TOOLS)))

stdjclean:
	@ -rm -rf $(CLSPATH)

# removing symbolic links that point to specific builds
removelinks:
	@ test ! -h $(OUTDIR)/schema && rm -rf $(OUTDIR)/schema || true
	@ rm -f $(addprefix $(OUTDIR)/,$(addsuffix $(BITS),$(SUBDIRS)))
	@ rm -f $(addprefix $(OUTDIR)/,$(OUTDIRS))

# create all required output directories
makedirs:
	@ mkdir -p $(addprefix $(TARGDIR)/,$(SUBDIRS) obj/$(MODULE)) $(NCBIDIR)

makejdirs: makedirs
	@ mkdir -p $(CLASSDIR)

# build version include files
vers-includes: makedirs
	@ $(MAKE_CMD) -s $(TARGDIR)/$@

ifeq (win,$(OS))

# Windows doesn't really support symbolic links
# we may add them back in when our toolkit is able to create them
rebuild-dirlinks: makedirs
	@ true
else

LNDIRS = $(addprefix ln_,$(SUBDIRS))
$(LNDIRS):
	@ ln -s $(TARGDIR)/$(subst ln_,,$@) $(OUTDIR)/$(subst ln_,,$@)$(BITS)

ifdef NOREBUILD_LINKS
rebuild-dirlinks:
	@ true
else
rebuild-dirlinks: removelinks makedirs $(LNDIRS)
	@ ln -s $(TOP)/interfaces $(OUTDIR)/schema
endif

endif

.PHONY: compile stdcompile stdclean removelinks makedirs vers-includes rebuild-dirlinks
.PHONY: stdjclean makejdirs

# configuration targets
out:
	@ echo $(OUTDIR) > $(TOP)/build/OUTDIR.$(BUILD_OS)
	@ $(MAKE) TOP=$(TOP) -f $(TOP)/build/Makefile.env rebuild-dirlinks

$(RHOSTS):
	@ cat $(TOP)/rhosts/$@ >> $(TOP)/build/RHOST.$(HOST_OS)

require-proxy-exec:
	@ $(MAKE) -C $(TOP)/test/proxy_exec proxy-exec
	@ echo "PROXY_TOOL := $(BINDIR)/proxy-exec" > $(TOP)/build/RHOST.$(HOST_OS)

local:
	@ rm -f $(TOP)/build/RHOST.$(HOST_OS)

CC:
	@ echo cc > $(TOP)/build/COMP.$(OS)

GCC:
	@ echo gcc > $(TOP)/build/COMP.$(OS)

ICC:
	@ echo icc > $(TOP)/build/COMP.$(OS)

VC++:
	@ echo vc++ > $(TOP)/build/COMP.$(OS)

CLANG:
	@ echo clang > $(TOP)/build/COMP.$(OS)

static dynamic:
	@ echo "there is no longer any difference between static and dynamic builds"

debug:
	@ echo dbg > $(TOP)/build/BUILD.$(OS)

profile:
	@ echo prof > $(TOP)/build/BUILD.$(OS)

release:
	@ echo rel > $(TOP)/build/BUILD.$(OS)

scm:
	@ echo scm > $(TOP)/build/BUILD.$(OS)

pubtools: release

bindir:
	@ echo "$(BINDIR)"

targdir:
	@ echo "$(TARGDIR)"

osdir:
	@ echo "$(OUTDIR)/$(OS)"

compilers:
	@ echo "$(COMPILERS)"

architectures:
	@ echo "$(ARCHITECTURES)"

architecture:
	@ echo "$(ARCH)"

config:
	@ echo "  current build is $(LOCAL_OR_REMOTE) $(BUILD_OS) $(BUILD) $(ARCH) build using $(TOOLSET) tools"
	@ echo "  output target directory is '$(TARGDIR)'"
	@ echo

purify:
	@ echo pur > $(TOP)/build/BUILD.$(OS)

purecov:
	@ echo pcov > $(TOP)/build/BUILD.$(OS)

fuzz: makedirs

.PHONY: out CC GCC ICC debug profile release scm purify purecov local local require-proxy-exec $(RHOSTS) bindir report_config

# includes based upon build
ITF = $(TOP)/interfaces
OSINC = $(TOP)/interfaces/os
CCINC = $(TOP)/interfaces/cc
XTINC = $(TOP)/interfaces/ext
NGSINC = $(NGS_INCDIR)
OVERRIDEINC = $(TOP)/interfaces/override

# OS specific source and include dirs
SRCDIRS_OS = $(SRCDIR)/$(OS)
INCDIRS_OS = $(OSINC)/$(OS)

# most OS' have a parent type
ifdef OS_DAD

SRCDIRS_OS += $(SRCDIR)/$(OS_DAD)
INCDIRS_OS += $(OSINC)/$(OS_DAD)

# some OS' have a grandparent
ifdef OS_GDAD
SRCDIRS_OS += $(SRCDIR)/$(OS_GDAD)
INCDIRS_OS += $(OSINC)/$(OS_GDAD)
endif

endif

# compiler specific includes
INCDIRS_COMP = \
	$(CCINC)/$(COMP)/$(ARCH) \
	$(CCINC)/$(COMP)

# some compilers have a parent type
ifdef COMP_DAD

INCDIRS_COMP += \
	$(CCINC)/$(COMP_DAD)/$(ARCH) \
	$(CCINC)/$(COMP_DAD)

endif

VPATH = \
	$(SRCDIR)/$(COMP)/$(ARCH) \
	$(SRCDIR)/$(COMP) \
	$(SRCDIRS_OS) \
	$(SRCDIR)

# include rules now that VPATH is fully set
include $(TOP)/build/Makefile.rules

INCDIRS = \
	$(addprefix -I,$(OVERRIDEINC)) \
	$(addprefix -I,$(SRCDIRS_OS)) \
	$(addprefix -I,$(SRCDIR) $(ITF)) \
	$(addprefix -I,$(INCDIRS_COMP)) \
	$(addprefix -I,$(INCDIRS_OS)) \
	$(addprefix -I,$(XTINC) $(NGSINC)) \
	-I.

# linker paths
LDPATHS =

ifneq (,$(HDF5_LIBDIR))
	LDPATHS += -L$(HDF5_LIBDIR)
endif
ifneq (,$(XML2_LIBDIR))
	LDPATHS += -L$(XML2_LIBDIR)
endif
ifneq (,$(MAGIC_LIBDIR))
	LDPATHS += -L$(MAGIC_LIBDIR)
endif
ifneq (,$(MBEDTLS_LIBDIR))
	LDPATHS += -L$(MBEDTLS_LIBDIR)
endif
ifneq (,$(FUSE_LIBDIR))
	LDPATHS += -L$(FUSE_LIBDIR)
endif
 

# defines that describe os & architecture
DLLX ?= $(SHLX)
ARCHDEFS = -D_ARCH_BITS=__SIZEOF_POINTER__*__CHAR_BIT__ -DLIBPREFIX=$(LPFX) -DSHLIBEXT=$(DLLX)

# default tool parameters
CFLAGS	= -std=c11 $(DEBUG) $(DBG) $(CARCH) $(PROF) $(PED) $(DEFINES) $(ARCHDEFS) $(MIN_DEPLOY_OS_OPT) $(INCDIRS)
CPFLAGS = -std=c++11 $(DEBUG) $(DBG) $(CARCH) $(PROF) $(DEFINES) $(ARCHDEFS) $(MIN_DEPLOY_OS_OPT) $(INCDIRS)
# some LDFLAGS may have been specified in $(CONFIG_FILE)
LDFLAGS += $(DBG) $(PROF) $(CARCH) $(MIN_DEPLOY_OS_OPT)

#-------------------------------------------------------------------------------
# runtests
#
# MallocScribble=1 is for catching allocation problems on Mac
#
ifeq ($(RUNTESTS_OVERRIDE),)
runtests: all $(TEST_TOOLS)
	@ export VDB_CONFIG=$(VDB_CONFIG);\
	export LD_LIBRARY_PATH=$(LIBDIR):$$LD_LIBRARY_PATH;export MallocScribble=1;\
	for i in $(TEST_TOOLS);\
	do\
		echo ++++++++++++++++++++++++++++++++++++++++++++++++++++++;\
		echo Run $(TEST_BINDIR)/$$i;eval $(RUN_REMOTELY) $(TEST_BINDIR)/$$i;r=$$?; \
		if [ "$$r" != "0" ] ; then exit $$r; fi; \
	done

.PHONY: runtests
endif

#-------------------------------------------------------------------------------
# slowtests
#
# $(SLOWTESTSDATADIR) should be used to create temporary test files
SLOWTESTSDATADIR ?= /panfs/pan1.be-md.ncbi.nlm.nih.gov/sra-test/slowtests/$(shell whoami)

slowtests: all $(SLOW_TEST_TOOLS)
	@ export LD_LIBRARY_PATH=$(LIBDIR):$$LD_LIBRARY_PATH;\
	for i in $(SLOW_TEST_TOOLS);\
	do\
		echo ++++++++++++++++++++++++++++++++++++++++++++++++++++++;\
		echo Run $(TEST_BINDIR)/$$i;eval $(RUN_REMOTELY) $(TEST_BINDIR)/$$i;r=$$?; \
		if [ "$$r" != "0" ] ; then exit $$r; fi; \
	done

.PHONY: slowtests

